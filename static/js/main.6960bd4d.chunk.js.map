{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","CardList","monsters","map","card_Card","key","SearchBox","_ref","placeholder","onChange","type","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_SearchBox","card_list_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAEaA,SAAO,SAAAC,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UACTC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,4BACHR,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,QAAQE,MACnBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,QAAQG,UCJLC,SAAU,SAAAZ,GAAK,OAC5BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdJ,EAAMa,SAASC,IAAI,SAAAN,GAAO,OACzBP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,SCFpBS,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,SAAf,OAC1BnB,EAAAC,EAAAC,cAAA,SACCC,UAAU,aACViB,KAAK,SACLF,YAAaA,EACbC,SAAUA,MCyCIE,qBA3Cd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaDI,aAAe,SAAAC,GAAK,OAAIR,EAAKS,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAZjEZ,EAAKa,MAAQ,CACZvB,SAAU,GACVoB,YAAc,IAJHV,mFAOM,IAAAc,EAAAX,KAClBY,MAAM,8CAELC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SAEzBF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAEnB,SAAS6B,uCAQjC,IAAAC,EAC0BjB,KAAKU,MAA9BvB,EADD8B,EACC9B,SAAUoB,EADXU,EACWV,YAEZW,EAAmB/B,EAASgC,OAAO,SAAArC,GAAO,OAC5CA,EAAQE,KAAKoC,cAAcC,SAASd,EAAYa,iBAGpD,OAEE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACjBH,EAAAC,EAAAC,cAAA,8BACDF,EAAAC,EAAAC,cAAC6C,EAAD,CACA7B,YAAY,iBACZC,SAAUM,KAAKI,eAEf7B,EAAAC,EAAAC,cAAC8C,EAAD,CAAUpC,SAAU+B,YApCHM,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.6960bd4d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card = props =>(\r\n<div className='card-container'>\r\n<img alt='monster' \r\nsrc={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n<h2>{props.monster.name}</h2>\r\n<p>{props.monster.email}</p>\r\n</div>\r\n);","import React from 'react';\r\nimport { Card } from '../../components/card/card';\r\nimport './card-list.styles.css'\r\nexport const CardList= props =>(\r\n<div className='card-list'>\r\n{props.monsters.map(monster=>(\r\n\t <Card key={monster.id} monster={monster} />\r\n\t))}\r\n\t</div>\r\n);\r\n/*export const CardList = props => (\r\n  <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>*/","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n export const SearchBox = ({placeholder, onChange}) =>(\r\n<input \r\n\tclassName='search-box'\r\n\ttype='search'\r\n\tplaceholder={placeholder}\r\n\tonChange={onChange}\r\n />\r\n );","import React from 'react';\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n//import logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField : ''\n\t\t}\n\t}\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\n\t\t.then(response =>response.json())\n\t\t\n\t\t.then(users => this.setState({ monsters:users }))\n\t}\n\thandleChange = event => this.setState({searchField : event.target.value});\n\t\n\t /*fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));*/\n\t\n\trender(){\n\t\tconst { monsters, searchField }= this.state;\n\t\t\n\t\tconst filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\t\t\n\t\treturn (\n\t\t\n    <div className=\"App\">\n\t <h1>Monsters Rolodex</h1>\n\t<SearchBox\n\tplaceholder='Search Monster'\n\tonChange={this.handleChange}\n\t/>\n\t<CardList monsters={filteredMonsters} />\n\t\n    </div>\n  );\n\t}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}